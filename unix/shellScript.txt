- To start a Spring Boot app:

#!/usr/bin/env bash
export homeDir=$(pwd)
export trustStore=${homeDir}/ext-lib/cacerts
export jwtConfigDir=/jwt/consumer

# Command to execute this shell
# sh start.sh <APPLICATION_VERSION> <PROFILE_TYPE> <PROFILES_LOAD_FILES>
# E.g. sh start.sh 28-SNAPSHOT TEST sampleData.xlsx,sampleData_FAILURE_OUTPUT.xlsx

# Script arguments
APPLICATION_VERSION=$1
PROFILE_TYPE=$2
#Comma separated list of input file and failure file. Don't add any space.
PROFILES_LOAD_FILES=$3

APPLICATION_NAME=sample-springBoot-batch

# Text Colour
RED="\033[1;31m"          # Red
GREEN="\033[1;32m"        # Green
COLOR_OFF="\033[0m"       # Text Reset

printHeader(){
    message=$1
    echo -e "\n\n${GREEN}${message}${COLOR_OFF}"
}

printHeader "####### STARTING APPLICATION ########"

if [[ $# -ne 3 ]]; then
echo -e "\n${RED}
This start script requires 4 arguments to run:
  1> APPLICATION_VERSION                : Only the version of the artifact (in this case .jar) eg. 0.24.0
  2> PROFILE_TYPE                       : The type of user to be loaded. For example: TEST
  3> PROFILES_LOAD_FILE                 : Full Path to the user profile xlsx file and failure file separated by comma.
                                          For example, sampleData.xlsx,sampleData_FAILURE_OUTPUT.xlsx

  Refer to the GitHub release note for more information.
  ${COLOR_OFF}"

  exit 1
fi

echo "variable APPLICATION_VERSION is \"${APPLICATION_VERSION}\"
variable PROFILE_TYPE is \"${PROFILE_TYPE}\"
variable PROFILES_LOAD_FILE is \"${PROFILES_LOAD_FILES}\"
variable APPLICATION_NAME is \"${APPLICATION_NAME}\"
";

/usr/java/default/bin/java \
-Dspring.config.location=${homeDir}/ext-lib/application.properties \
-Dapp_JWT_KEYSTORE=${jwtConfigDir}/app_keystore.jceks \
-Dapp_JWT_KEYSTORE_PWD=${jwtConfigDir}/app_keystore.properties \
-Dapp_JWT_CFG_FILE=${homeDir}/ext-lib/jwtGeneratorCfg.json \
-Djavax.net.ssl.trustStore=${trustStore} \
-jar ${APPLICATION_NAME}-${APPLICATION_VERSION}.jar \
${PROFILE_TYPE} \
${PROFILES_LOAD_FILES}


- Another script used to start a Spring Boot app:

A sample usage is:
cd /home/fba/api-loader/devint/api-loader-2.2.0-SNAPSHOT
sh /home/fba/api-loader/devint/api-loader-2.2.0-SNAPSHOT/api-loader.sh -u eurekaUsername -p eurekaPassword -e devint -s serviceName -d /home/fba/api-loader/devint/api-loader-2.2.0-SNAPSHOT/input/serviceData.xlsx

The script is:
#!/usr/bin/env bash

# The next line returns: /home/fba/api-loader/devint/api-loader-2.2.0-SNAPSHOT
export homeDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# The next line returns: api-loader-2.2.0-SNAPSHOT
export jarName="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd | xargs basename )"
export jwtConfigLoc=/sys_api/consumer

usage() {
  echo "Usage: sh full_path_to_api-loader.sh -u eurekaUsername -p eurekaPassword -e environmentName -s serviceName -d fullPathToDataFileToBeLoaded"
  exit 0;
}

# The next line verifies that parameters were provided to the script.
[ $# -eq 0 ] && usage

while getopts "u:p:e:s:d:" o; do
  case "${o}" in
    u) # Specify Eureka username
      eurekaUser=${OPTARG}
      ;;
    p) # Specify Eureka password
      eurekaPass=${OPTARG}
     ;;
    e) # Specify environmentName
      env=${OPTARG}
      ;;
    s) # Specify the service
      service=${OPTARG}
      ;;
    d) # Specify the datafile
      datafile=${OPTARG}
      ;;
    h | *) # Display help
      usage
      ;;
  esac
done

# Verify that all parameters are set.
[[ -z "${eurekaUser}" || -z "${eurekaPass}"  || -z "${env}"  || -z "${service}"  || -z "${datafile}" ]] && usage

echo "Spring profile is " ${env}

# Identify and set environment specific keystore files
if [[ "$env" =~ ^(dev|devint|sit)$ ]]; then
JAVA_OPTS="${JAVA_OPTS} -Deureka.credentials="${eurekaUser}:${eurekaPass}" -Djavax.net.ssl.trustStore=${homeDir}/cacerts\
  -Dapi_loader_JWT_KEYSTORE=${jwtConfigLoc}/api_loader-DEV_Keystore.jceks\
  -Dapi_loader_JWT_KEYSTORE_PWD=${jwtConfigLoc}/api_loader-DEV_keystore.properties"
else
if [[ "$env" =~ ^(cert|prod)$ ]]; then
   JAVA_OPTS="${JAVA_OPTS} -Deureka.credentials="${eurekaUser}:${eurekaPass}" -Djavax.net.ssl.trustStore=${homeDir}/cacerts\
    -Dapi_loader_JWT_KEYSTORE=${jwtConfigLoc}/api_loader-PROD_Keystore.jceks\
    -Dapi_loader_JWT_KEYSTORE_PWD=${jwtConfigLoc}/api_loader-PROD_keystore.properties"
fi
fi

echo "Using JAVA_OPTS: ${JAVA_OPTS}"
java ${JAVA_OPTS} -jar ${jarName}.jar --spring.profiles.active=${env} --service=${service} --datafile=${datafile} &

PID=$!
echo "Waiting for the process ${PID} to be completed..."
wait $PID

statusCode=${?}
echo "Data load process is completed with status : ${statusCode}"
exit ${statusCode}
