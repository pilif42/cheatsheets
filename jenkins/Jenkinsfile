#!/usr/bin/env groovy

import java.text.SimpleDateFormat   // not used but refrains IntelliJ from flagging entire script as an issue

// The pipeline job below makes use of build parameters:
// SSHAgent, RECREATE_INPUT_FILES, SERVER, BUILD_NUMBER
node('the-pipeline-job') {

    stage('Cleaning workspace') {
        echo 'Cleaning workspace....'
        cleanWs()
    }

    stage('Clearing directories on processing server') {
        echo 'Clearing directories on processing server...'
        sshagent(['${SSHAgent}']) {
            if (RECREATE_INPUT_FILES == 'true') {
                echo 'Clearing all input json files...'
                sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no username@${SERVER} 'cd /opt/app/data/username/inbound/ && rm -rf *'"
            }
            sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no username@${SERVER} 'cd /opt/app/data/username/outbound/ && rm -rf *'"
            sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no username@${SERVER} 'cd /home/username/your-app/logs/ && rm -rf *'"
            sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no username@${SERVER} 'cd /home/username/your-app/reports/ && rm -rf *'"
        }
    }

    checkout scm

    stage('Generating input json files') {
        if (RECREATE_INPUT_FILES == 'true') {
            echo 'Generating input json files....'
            sh './gradlew clean test --info -PcucumberOptions="--tags @Pipeline_Inputs" -PyourAppSpecificVersion="https://nexus.mycompany.com:8443/content/repositories/snapshots/com/sample/your-app/${BUILD_NUMBER}/" -Pprofile="jenkins"'
        }
    }

    stage('Transferring input files to processing server') {
           echo 'Transferring input files to processing server....'
           sshagent(['${SSHAgent}']) {
               if (RECREATE_INPUT_FILES == 'true') {
                   sh "scp ./dataToReadDir/*.json username@${SERVER}:'/opt/app/data/username/inbound/'"
                   echo "Copy of input files to server done"
               }

               sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no username@${SERVER} 'cd /opt/app/data/username/scripts/your_app/ && ./createSentFiles.sh'"
               echo "SENT file now created"
        }
    }

    stage('Processing files') {
        echo 'Processing files....'
        sshagent(['${SSHAgent}']) {
              sh "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no username@${SERVER} 'cd /opt/app/data/username/scripts/your_app/ && ./start.sh devint'"
        }
    }

    stage('Copying output json to Jenkins workspace for validation') {
        echo 'Copying output json to Jenkins workspace for validation....'
        sshagent(['${SSHAgent}'])  {
		  // dataToWriteDir is at the root of the workspace. Same for logs and reports.
          sh "scp username@${SERVER}:'/opt/app/data/username/outbound/*.json' './dataToWriteDir/dataToReadDir/'"
          echo "output files now in the Jenkins workspace"

          sh "scp  username@${SERVER}:'/home/username/your-app/logs/*.*' './logs/'"
          echo "logs now in the Jenkins workspace"

          sh "scp  username@${SERVER}:'/home/username/your-app/reports/*.*' './reports/'"
          echo "reports now in the Jenkins workspace"
        }
    }

    stage('Validating output files') {
        echo 'Validating output files...'
        // TODO In @Pipeline_Output_Checks, we recreate the input files because we are here in a different workspace from the one used at stage 'Generating input json files'
        // TODO Instead, use approach described at https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/doc/PIPELINE_EXAMPLES.md#workspace-reuse-in-two-different-jobs
        sh './gradlew clean test --info -PcucumberOptions="--tags @Pipeline_Output_Checks" -PyourAppSpecificVersion="https://nexus.mycompany.com:8443/content/repositories/snapshots/com/sample/your-app/${BUILD_NUMBER}/" -Pprofile="pipeline"'

        // TODO Anything archived below will appear under Build Artifacts in a given build (in the web UI).
        archiveArtifacts 'target/cucumber-html-report/*.*'
        archiveArtifacts 'target/cucumber.json'
        archiveArtifacts 'target/cucumber-pretty.txt'

        // Line below is to activate the link 'Cucumber reports'
        cucumber fileIncludePattern: 'target/cucumber.json', sortingMethod: 'ALPHABETICAL'
    }
}