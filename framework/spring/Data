- Spring Integration test with @Sql:

Annotate your test class with:
@RunWith(SpringRunner.class)
@ContextConfiguration(classes = {ApplicationTestConfig.class, ExpandHierarchyServiceImplTest.PartyHierarchyServiceTestConfig.class, JacksonAutoConfiguration.class})
@TestPropertySource(locations = "classpath:/application-test.yml")

Where:

@Configuration
@ComponentScan(basePackages = {"com.sample.partyhierarchy.service", "com.sample.partyhierarchy.repository", "com.sample.partyhierarchy.jpa", "com.sample.party.services.mappers"})
public static class PartyHierarchyServiceTestConfig {
}

And:

import ch.vorburger.exec.ManagedProcessException;
import ch.vorburger.mariadb4j.DB;
import ch.vorburger.mariadb4j.springframework.MariaDB4jSpringService;
...
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.SimpleDriverDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import java.sql.Driver;

@TestConfiguration
@EnableJpaRepositories(basePackageClasses = {PartyRepository.class, PartyHierarchyRepository.class, UserRepository.class, UserPartyRepository.class})
@EntityScan(basePackages = "com.sample.partyhierarchy.jpa")
@Import({DataSourceAutoConfiguration.class, JdbcTemplateAutoConfiguration.class, HibernateJpaAutoConfiguration.class})
public class ApplicationTestConfig {
    @Lazy
    private PartyRepository partyRepository;

    @Lazy
    private PartyHierarchyRepository partyHierarchyRepository;

    @Bean
    public MariaDB4jSpringService mariaDB4jSpringService() throws ManagedProcessException {
        return new MariaDB4jSpringService();
    }

    @Bean
    public DB db(@Autowired MariaDB4jSpringService mariaDB4jSpringService) throws ManagedProcessException {
        DB db = mariaDB4jSpringService.getDB();
        db.createDB("partyhierarchy");
        db.source("sql/party_hierarchy_initial_create.sql", "root", null, "partyhierarchy");
        db.source("sql/schema_update_2.sql", "root", null, "partyhierarchy");
        db.source("sql/schema_update_5.sql", "root", null, "partyhierarchy");
        db.source("sql/schema_update_7.sql", "root", null, "partyhierarchy");

        return db;
    }

    @Bean
    @DependsOn("db")
    public DataSource dataSource(@Value("${spring.datasource.driver-class-name}") String dataSourceClassName,
                                 @Autowired MariaDB4jSpringService mariaDB4jSpringService,
                                 @Value("${spring.datasource.username}") String username) throws Exception {
        SimpleDriverDataSource dataSource = new SimpleDriverDataSource();
        dataSource.setDriverClass((Class<Driver>) Class.forName(dataSourceClassName));
        dataSource.setUrl(mariaDB4jSpringService.getConfiguration().getURL("partyhierarchy"));
        dataSource.setUsername(username);

        return dataSource;
    }

    @Bean
    @DependsOn("dataSource")
    public LocalContainerEntityManagerFactoryBean entityManagerFactory(@Autowired DataSource dataSource) {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource);
        em.setPackagesToScan("com.sample.partyhierarchy");

        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        em.setJpaVendorAdapter(vendorAdapter);

        return em;
    }

    @Bean
    public PlatformTransactionManager transactionManager(@Autowired EntityManagerFactory emf) {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(emf);

        return transactionManager;
    }

    @Bean
    LocalValidatorFactoryBean validator() {
        return new LocalValidatorFactoryBean();
    }
}

And annotate your test with:

@Test
@Sql("/partyHierarchy/sql/datasetX.sql")
@Sql(scripts = "/partyHierarchy/sql/deleteData.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
public void testAllHierarchiesDatasetX() throws Exception {


- To store an entity data across 2 tables: the entity is ErrorOmission. The tables are error_omission, error_omission_products (note the @ElementCollection on the Set<Product> products) and error_omission_access_types (note the @ElementCollection on the Set<AccessType>).
    - Schema defined in db.changelog-master.yaml through Liquibase:
          databaseChangeLog:
            - changeSet:
                id: 1
                author: pbross
                changes:
                  - createTable:
                      tableName: error_omission
                      columns:
                        - column:
                            name: error_reference
                            type: BIGINT
                            autoIncrement: true
                            constraints:
                              - primaryKey: true
                                nullable: false
                        - column:
                            name: developer_id
                            type: varchar(255)
                            constraints:
                              - nullable: false
                        - column:
                            name: correction_type
                            type: varchar(20)
                            constraints:
                              - nullable: false
                        - column:
                            name: other_product
                            type: varchar(255)
                            constraints:
                              - nullable: true
                        - column:
                            name: other_access_type
                            type: varchar(255)
                            constraints:
                              - nullable: true
                        - column:
                            name: title
                            type: varchar(255)
                        - column:
                            name: description
                            type: CLOB
                        - column:
                            name: impact
                            type: varchar(255)
                        - column:
                            name: geom
                            type: Geometry
                            constraints:
                              - nullable: true
                        - column:
                            name: location
                            type: Geometry
                            constraints:
                              - nullable: true
                        - column:
                            name: created
                            type: DATETIME
                            constraints:
                              - nullable: false

                  - createTable:
                      tableName: error_omission_products
                      columns:
                        - column:
                            name: error_omission_error_reference
                            type: BIGINT
                            constraints:
                              - foreignKeyName: fk_product_error_omission
                                references: error_omission(error_reference)
                                nullable: false
                        - column:
                            name: product
                            type: varchar(50)
                            constraints:
                              - nullable: false

                  - createTable:
                      tableName: error_omission_access_types
                      columns:
                        - column:
                            name: error_omission_error_reference
                            type: BIGINT
                            constraints:
                              - foreignKeyName: fk_access_types_error_omission
                                references: error_omission(error_reference)
                                nullable: false
                        - column:
                            name: access_type
                            type: varchar(20)
                            constraints:
                              - nullable: false

            - changeSet:
                id: 2
                author: pbross
                changes:
                  - sql:
                      dbms: mssql
                      splitStatements: true
                      sql: |
                        CREATE SPATIAL INDEX error_omission_geom_idx ON error_omission(geom) WITH ( BOUNDING_BOX = (-100000, 0, 700000, 1300000) );
                        CREATE SPATIAL INDEX error_omission_location_idx ON error_omission(location) WITH ( BOUNDING_BOX = (-100000, 0, 700000, 1300000) );
                  - sql:
                      dbms: h2
                      splitStatements: true
                      sql: |
                        CREATE SPATIAL INDEX error_omission_geom_idx ON error_omission(geom);
                        CREATE SPATIAL INDEX error_omission_location_idx ON error_omission(location);

    - Entity bean defined with:
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.Point;

import javax.persistence.*;
import java.time.Instant;
import java.util.Set;

@Entity
@Getter
@Setter
@EntityListeners(ErrorOmissionEntityListener.class)
public class ErrorOmission {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long errorReference;

        private String developerId;

        @Enumerated(EnumType.STRING)
        private CorrectionType correctionType;

        @ElementCollection
        @Enumerated(EnumType.STRING)
        @Column(name = "product")
        private Set<Product> products;

        private String otherProduct;

        @ElementCollection
        @Enumerated(EnumType.STRING)
        @Column(name = "access_type")
        private Set<AccessType> accessTypes;

        private String otherAccessType;

        @Column(name = "geom")
        private Geometry geometry;

        private Point location;

        private String title;

        private String description;

        private String impact;

        @CreationTimestamp
        private Instant created;
}
