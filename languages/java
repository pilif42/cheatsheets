- When Symantec Web Security Service (WSS) is used, you may need to add the required certs to the cacerts for both the Zulu Java and the embedded IntelliJ Java:
    - if you do not add the required certs, you may experience SSLException when running a cmd line build in GitBash for instance.
    - add them to cacerts in C:\Program Files\Zulu\zulu-8\jre\lib\security
        - Windows Powershell as Administrator
        - keytool -importcert -file C:\Temp\taf\certificates\CertEmulationCA.crt -keystore "C:\Program Files\Zulu\zulu-8\jre\lib\security\cacerts" -alias "SymantecWSS"
        - keytool -importcert -file C:\Temp\taf\certificates\entrust_2048_ca.cer -keystore "C:\Program Files\Zulu\zulu-8\jre\lib\security\cacerts" -alias "SymantecWSS1"
        - pwd is changeit

    - add them to cacerts in C:\Program Files (x86)\JetBrains\IntelliJ IDEA 2019.2.4\jbr\lib\security
        - Windows Powershell as Administrator
        - keytool -importcert -file C:\Temp\taf\certificates\CertEmulationCA.crt -keystore "C:\Program Files (x86)\JetBrains\IntelliJ IDEA 2019.2.4\jbr\lib\security\cacerts" -alias "SymantecWSS"
        - keytool -importcert -file C:\Temp\taf\certificates\entrust_2048_ca.cer -keystore "C:\Program Files (x86)\JetBrains\IntelliJ IDEA 2019.2.4\jbr\lib\security\cacerts" -alias "SymantecWSS1"
        - pwd is changeit


- Playing with Instants:
    - public static boolean compareInstants(final Instant instantOne, final Instant instantTwo) {
          boolean result;
          if (instantOne != null && instantTwo != null) {
              Long diff = Duration.between(instantOne, instantTwo).toMillis();
              LOGGER.debug("instantOne {} and instantTwo {} differ by {} milliseconds.", instantOne, instantTwo, diff);
              result =  Math.abs(diff) <= BUFFER_MS;
          } else {
              result = instantOne == null && instantTwo == null;
          }
          return result;
      }
    - And test with:
          private final static DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS");

          @Test
          public void compareInstants_twoIdenticalInstants() {
            final String instantOneStr = "2020-05-20T14:55:01.643";
            final String instantTwoStr = "2020-05-20T14:55:01.643";

            final Instant instantOne = LocalDateTime.parse(instantOneStr, DATE_TIME_FORMATTER).atZone(ZoneId.systemDefault()).toInstant();
            final Instant instantTwo = LocalDateTime.parse(instantTwoStr, DATE_TIME_FORMATTER).atZone(ZoneId.systemDefault()).toInstant();

            assertTrue(TestUtil.compareInstants(instantOne, instantTwo));
          }


- Enums:
Problem to solve: we want to select the One relevant organisation in an array of
Organisations based on plan names.

Define an Enum for the plan name. Give a weight to each plan. The deserialize
method is required as the plan name received from the external API can be an
empty string. Also, nothing tells us that in the future, they will not send us
null values.

package com.sample.dto;

import com.fasterxml.jackson.annotation.JsonCreator;
import lombok.Getter;
import org.springframework.util.ObjectUtils;

@Getter
public enum DataHubPlan {
    None(0), FreeData(1), PremiumBelow(2), PremiumAbove(3);

    private final int weight;

    DataHubPlan(int weight) {
        this.weight = weight;
    }

    @JsonCreator
    public static DataHubPlan deserialize(String input) {
        if (!ObjectUtils.isEmpty(input)) {
            for (DataHubPlan plan: values()) {
                if (plan.name().equalsIgnoreCase(input)) {
                    return plan;
                }
            }
        }
        return None;
    }
}



package com.sample.util;

import com.google.common.base.Predicates;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.sample.bfin.dto.OrganisationDto;
import com.sample.dto.DataHubPlan;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class OrganisationUtil {
    public static Optional<OrganisationDto> getRelevantOrg(OrganisationDto[] organisationDtos) {
        Optional<OrganisationDto> result = Optional.empty();
        if (organisationDtos != null) {
            List<OrganisationDto> organisationDtoList = Arrays.asList(organisationDtos);
            List<OrganisationDto> listWithoutNulls = Lists.newArrayList(
                    Iterables.filter(organisationDtoList, Predicates.notNull()));

            int size = listWithoutNulls.size();
            if (size > 0) {
                if (size == 1) {
                    result = Optional.of(listWithoutNulls.get(0));
                } else {
                    result = listWithoutNulls.stream().max(OrganisationUtil::compareByPlan);
                }
            }
        }
        return result;
    }

    private static int compareByPlan(OrganisationDto org1, OrganisationDto org2) {
        return getPlanWeight(org1).compareTo(getPlanWeight(org2));
    }

    private static Integer getPlanWeight(OrganisationDto org) {
        Integer result = Integer.MIN_VALUE;
        if (org != null) {
            DataHubPlan plan = org.getPlan();
            if (plan != null) {
                result = plan.getWeight();
            }
        }
        return result;
    }
}
 
