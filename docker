- to install Docker on Ubuntu & verify it:
    - Update Software Repositories: sudo apt-get update
    - Uninstall old versions of Docker: sudo apt-get remove docker docker-engine docker.io
    - Remove Docker files: sudo rm -rf /var/lib/docker
    - Install Docker:
            - sudo apt install docker.io
                  - reason we went for docker.io and not docker.ce:
                        - docker.io does it the Debian (or Ubuntu) way: Each external dependency is a
                        separate package that can and will be updated independently.
                        - docker-ce does it the Golang way: All dependencies are pulled into the source
                        tree before the build and the whole thing forms one single package afterwards.
                        So you always update docker with all its dependencies at once.
                        - The problem with the latter approach is that it goes against much of what
                        Debian/Ubuntu are trying to do.
                  - output:
                        Unpacking docker.io (19.03.2-0ubuntu1) ...
                        Setting up docker.io (19.03.2-0ubuntu1) ...
                        docker.service is a disabled or a static unit, not starting it.
                        Job failed. See "journalctl -xe" for details.
    - Start and Automate Docker: The Docker service needs to be setup to run at startup.
            - sudo systemctl start docker
                  - output: Failed to start docker.service: Unit docker.service is masked.
                  - solution:
                        sudo systemctl unmask docker.service
                        sudo systemctl unmask docker.socket
                        sudo systemctl start docker.service
                        sudo systemctl enable docker
    - Verify the install: sudo docker --version


- to install Docker Compose on Ubuntu & verify it:
sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo docker-compose --version


- to start all existing containers in the background:
copy docker-compose-dev_env.yml and docker-compose-services.yml from rm-docker-dev to /Users/philippebrossier/devtools/rmdockerdev
cd /Users/philippebrossier/devtools/rmdockerdev
docker login
sdcplatform / xxx
docker-compose -f docker-compose-dev_env.yml pull
docker-compose -f docker-compose-dev_env.yml up -d
docker-compose -f docker-compose-services.yml pull
docker-compose -f docker-compose-services.yml up -d


- to delete all containers:
cd /Users/philippebrossier/code/rm-docker-dev
docker-compose -f docker-compose-dev_env.yml stop
docker-compose -f docker-compose-dev_env.yml rm


- to delete a specific container:
docker stop <CONTAINER_NAME>
docker rm <CONTAINER_NAME>


- to stop all Confluent containers and prune the Docker system freeing up disk space:
sudo docker container stop $(docker container ls -a -q -f "label=io.confluent.docker") && docker system prune -a -f --volumes


- to create a RabbitMQ container:
docker run -d --hostname rabbit --name rmdockerdev_rabbitmq_1 -p 4369:4369 -p 25672:25672 -p 5671-5672:5671-5672 -p 15671-15672:15671-15672 rabbitmq:3.6-management


- to create a Postgres container:
docker run --name rmdockerdev_ons-postgres_1  -d -p 5432:5432 ons_postgres
docker start rmdockerdev_ons-postgres_1


- to create a Redis container:
docker run --name rmdockerdev_redis_1  -d redis


- to view running containers:
docker ps


- to view all containers:
docker ps -a


- to open a bash command line window into the postgres container:
docker exec -it postgres bash
cd docker-entrypoint-initdb.d/ if you want to see the sql files that have been copied over.


- to access postgres:
docker exec -it rmdockerdev_ons-postgres_1 postgres -U postgres -d postgres
