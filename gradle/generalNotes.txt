- To force all dependencies to be re-resolved:
	./gradlew clean build --refresh-dependencies
	- I had to use this on a project when a dependency .jar changed but its version was kept at 1.0.0_snapshot. The tag --refresh-dependencies forced a download of the latest 1.0.0_snapshot.


- To publish to local Maven with Gradle
./gradlew clean build publishToMavenLocal


- To ensure unit tests are run with jvmArgs:
test {
   jvmArgs = ["-Djavax.net.ssl.trustStore=src/test/resources/cacerts"]
}


- To exclude a dependency added in compile and that causes an issue in test at runtime:
configurations {
    testRuntime.exclude group: 'org.springframework.cloud', module: 'spring-cloud-starter-netflix-eureka-client'
}


- To exclude a dependency added in compile and that causes an issue in test at compiletime:
configurations {
    testCompile.exclude group: 'javax.ws.rs', module: 'jsr311-api'
}


- To use a class belonging to project_A in src/test in a project_B:
		- AvroContextUtil is in src/test of module common-storm-ingest
		- We want to use it in module ods-storm-event-ingest (in src/test).
		- Simply add the line below in build.gradle of ods-storm-event-ingest:
					testCompile project(':common-storm-ingest').sourceSets.test.output
		- Note that we also had:
					compile(project(':common-storm-ingest')) {
					    exclude group: 'org.apache.zookeeper'
					    exclude group: 'org.slf4j'
					    exclude group: 'log4j'
					    exclude group: 'org.apache.curator'
					}
