- To force all dependencies to be re-resolved:
	./gradlew clean build --refresh-dependencies
	- I had to use this on a project when a dependency .jar changed but its version was kept at 1.0.0_snapshot. The tag --refresh-dependencies forced a download of the latest 1.0.0_snapshot.


- To publish to local Maven with Gradle
./gradlew clean build publishToMavenLocal


- To ensure unit tests are run with jvmArgs:
test {
   jvmArgs = ["-Djavax.net.ssl.trustStore=src/test/resources/cacerts"]
}


- To exclude a dependency added in compile and that causes an issue in test at runtime:
configurations {
    testRuntime.exclude group: 'org.springframework.cloud', module: 'spring-cloud-starter-netflix-eureka-client'
}


- To exclude a dependency added in compile and that causes an issue in test at compiletime:
configurations {
    testCompile.exclude group: 'javax.ws.rs', module: 'jsr311-api'
}


- To use a class belonging to project_A in src/test in a project_B:
		- AvroContextUtil is in src/test of module common-storm-ingest
		- We want to use it in module ods-storm-event-ingest (in src/test).
		- Simply add the line below in build.gradle of ods-storm-event-ingest:
					testCompile project(':common-storm-ingest').sourceSets.test.output
		- Note that we also had:
					compile(project(':common-storm-ingest')) {
					    exclude group: 'org.apache.zookeeper'
					    exclude group: 'org.slf4j'
					    exclude group: 'log4j'
					    exclude group: 'org.apache.curator'
					}


- To use a dependency .jar stored locally:
		- compile files('c:\\tempoLoca\\someDependency.jar')


- To publish several artifacts to a Maven-type repo (Nexus or similar):
The code below was done using Gradle 4.10.

Required plugins as we deal with a Spring Boot app:
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'maven-publish'

To say that you want to publish both the application .jar built by the Spring Boot plugin and the config files .tar built by the distTar task:
artifacts {
    archives bootJar
    archives distTar
}

And note the addfilter(s) and the pom below. These are mandatory otherwise the Maven plugin will only publish one artifact and will not warn you that it ignores others:
uploadArchives() {
    def nxUsername = System.getenv("nexusUsername") ?: "nexusUsernameNotSet"
    def nxPassword = System.getenv("nexusPassword") ?: "nexusPasswordNotSet"

    repositories.mavenDeployer {
        repository(url: nexusReleaseRepoURL) {
            authentication(userName: nxUsername, password: nxPassword)
        }
        snapshotRepository(url: nexusSnapshotRepoURL) {
            authentication(userName: nxUsername, password: nxPassword)
        }
        addFilter('jar') {artifact, file ->
            artifact.ext == 'jar'
        }
        addFilter('tar') {artifact, file ->
            artifact.ext == 'tar'
        }
        pom('tar').version = "$version"
    }
}

Other way to define your artifacts section:
def stagingScriptsArtifact = file("$buildDir/distributions/$stagingScriptArtifactId-$projVersion" + ".tar")
def appArtifact = file("$buildDir/distributions/$projArtifactId-$version" + ".jar")
artifacts {
archives stagingScriptsArtifact
archives appArtifact
}

This is longer and more brittle as we rely on file names.


- To copy the application .jar (built by Spring) to \build\distributions. This needs to be invoked with ./gradlew build copyAppJar. It depends on build as the .jar must be present in \build\libs before it can be copied.
task copyAppJar(type: Copy) {
    dependsOn build
    from file("$buildDir/libs/$projArtifactId-$version" + ".jar")
    into file("$buildDir/distributions")
}


- To create a tar file in the distributions folder from config files:
**
* @param tarName the name of the tar file
* @param folderToArchive the folder that requires to be archived
*/
def createTar(tarName, folderToArchive) {
    distributions {
        main {
            baseName = "${tarName}"
            contents {
                from("${folderToArchive}/") {
                    into("${folderToArchive}")
                }
            }
        }
    }
}

// Export methods by turning them into closures
ext {
    createTar = this.&createTar
    getLatestArtifact = this.&getLatestArtifact
}

task buildStagingScripts(type: Tar) {
    createTar(stagingScriptArtifactId, "env")
}

The .tar file will be built during the task distTar (automatically invoked when
doing ./gradlew build) and will end up in \build\distributions.


- To ensure that the gradle wrapper is present so that people do not need to
download Gradle:

In build.gradle, add:
allprojects {
    group "${projGroupId}"
    version "${projVersion}"
    task wrapper(type: Wrapper) {
        gradleVersion = "${gradleDistVersion}"
        distributionUrl = "${gradleDistributionHost}/content/groups/public/org/gradle/gradle/${gradleVersion}/gradle-${gradleVersion}-all.zip"
    }
}

And in gradle.properties, add:
projGroupId=com.sample
projVersion=1.0.0


- To force a specific version for a transitive dependency. In this example, we
ensure that only version 1.2.5 of my-extractor-lib is used, even if another
stated dependency (com.sample:avro-utils) references version 1.2.6 of
my-extractor-lib:
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name.contains(â€˜my-extractor-lib')) {
            details.useTarget 'com.sample:my-extractor-lib:1.2.5'
        }
    }
}
 
