To put together our working solution, I used the documentation at:
- https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/
- https://guides.gradle.org/migrating-from-maven/


The project code is organized as per below:
src/integration-test/java
src/integration-test/resources

src/main/java
src/main/resources

src/test/java
src/test/resources


# To run unit tests only (report at /build/reports/test)
./gradlew clean test
or
./gradlew clean build -x integrationTest


# To run integration tests only (report at /build/reports/integrationTest)
./gradlew clean integrationTest
or
./gradlew clean build -x test


# To run unit & integration tests
./gradlew clean test integrationTest
or
./gradlew clean build


The build.gradle is below:
buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
        spockVersion = '1.0-groovy-2.4'
    }
    repositories {
        mavenLocal()
        maven { url nexusPublicRepoURL }
        maven { url enterpriseArchitectureNexusRepoURL }
        maven { url farnboroughNexusRepoURL }
    }
    dependencies {
        classpath 'com.discover.esqmci:discover-project-plugin:latest.release'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "pl.allegro.tech.build:axion-release-plugin:1.3.1"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+"
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}

apply from: 'common.gradle'
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'distribution'
apply from: 'integrationTest.gradle'

project.group = 'com.discover.epp'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}")
    ...

    testCompile('org.codehaus.groovy:groovy:2.4.7')
    ...

    integrationTestCompile 'com.github.tomakehurst:wiremock-standalone:2.7.1'
    integrationTestCompile 'com.github.stefanbirkner:system-rules:1.16.1'
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

springBoot {
    layout = 'ZIP'
    classifier = 'exec'
}

distributions {
    main {
        baseName = "${project.name}"
        contents {
            from("$buildDir/libs/$project.name-$project.version-exec.jar")
            from("ext-lib") {
                into("ext-lib")
            }
            from("scripts/") {
                into("scripts")
            }
        }
    }
}

[distZip, distTar].each { task ->
    configurations.archives.artifacts.removeAll {
        it.class.simpleName == "ArchivePublishArtifact" && it.archiveTask == task
    }
    task.enabled = false
}

task enableTar(type: DefaultTask) {
    [distTar].each { task ->
        configurations.archives.artifacts.removeAll {
            it.class.simpleName == "ArchivePublishArtifact" && it.archiveTask == task
        }
        task.enabled = true
    }
}

artifacts {
    archives file("$buildDir/distributions/$project.name-$project.version"+'.tar')
}

task copyEnvConfig(type: Copy) {
    from "ext-lib/"
    into "src/main/resources"
}

task init(type: DefaultTask)

task initTestData(type: DefaultTask)

task deleteFiles(type: Delete) {

    delete fileTree("output"){
        include '**/*.*'
    }
    delete fileTree('reports') {
        include '**/*.txt'
        include '**/*.log'
    }
    delete fileTree('logs') {
        include '**/*.log'
    }
}

// To make sure that we have separate reports for test and integrationTest
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// To set flags on the compiler
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

init.finalizedBy copyEnvConfig
bootRepackage.finalizedBy enableTar
enableTar.finalizedBy assembleDist


The integrationTest.gradle is below:
sourceSets {
    integTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java/')
        }
        resources.srcDirs = [file('bin/_common/ext-lib'), file('src/integration-test/resources')]
    }

    manualIntegTest {
        java {
            compileClasspath += main.output + integTest.output
            runtimeClasspath += main.output
            srcDirs = ['src/manual-integration-test/java']
        }
        resources {
            resources.srcDirs = [file('bin/_common/ext-lib'), file('src/manual-integration-test/resources')]
        }
    }
}

task integTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    // To make sure that integration tests are run on each build
    outputs.upToDateWhen { false }
    jvmArgs = ["-Djavax.net.ssl.trustStore=src/integration-test/resources/cacerts", "-Djava.security.auth.login.config=src/integration-test/resources/kafka_client_jaas.conf"]
}

check.dependsOn integTest
integTest.mustRunAfter test

dependencies {
    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile

    manualIntegTestCompile sourceSets.main.output
    manualIntegTestCompile configurations.testCompile
}
