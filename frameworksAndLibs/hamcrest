- Example of extending an Hamcrest Matcher to verify that a String representing an Instant is within so many seconds of a reference Instant:

import java.time.Instant;

public class DateTimeWithinMatcher extends CustomTypeSafeMatcher<String> {
    private Instant reference;
    private Duration within;
    private boolean after;

    public DateTimeWithinMatcher(Instant reference, Duration within, String description) {
        this(reference, within, description, false);
    }

    public DateTimeWithinMatcher(Instant reference, Duration within, String description, boolean after) {
        super(description);
        this.reference = reference;
        this.within = within;
        this.after = after;
    }

    @Override
    protected boolean matchesSafely(String dateTime) {
        Duration gap = Duration.between(reference, Instant.parse(dateTime));
        if (after && gap.isNegative()) {
            return false;
        }
        return gap.abs().compareTo(within) <= 0;
    }

    public static Matcher<String> withinDurationOf(Duration duration, Instant of) {
        String description = "is within " + duration.toString() + " of " + of.toString();
        return new DateTimeWithinMatcher(of, duration, description);
    }

    public static Matcher<String> withinSecondsOf(long duration, Instant of) {
        String description = "is within " + duration + " seconds of " + of.toString();
        return new DateTimeWithinMatcher(of, Duration.ofSeconds(duration), description);
    }

    public static Matcher<String> withinSecondsAfter(long duration, Instant of) {
        String description = "is within " + duration + " seconds after " + of.toString();
        return new DateTimeWithinMatcher(of, Duration.ofSeconds(duration), description, true);
    }
}


- To verify that a method is called with a given map:

The method:
public void trackEvent(String name, Map<String, String> properties, Map<String, Double> metrics)


The test:
verify(mockTelemetryClient).trackEvent(eq("ERROR_SUBMITTED"),
        argThat(allOf(
                aMapWithSize(2),
                hasEntry("errorReference", "1"),
                hasEntry("caseId", "case1")
        )),
        isNull());


- A good example to test endpoint responses using hamcrest:
@ParameterizedTest
@ValueSource(booleans = {true, false})
@WithMockUser(authorities = {"ErrorsOmissions.Read", "ErrorsOmissions.Create", "ErrorsOmissions.Update"})
public void findClusters_WithReadPermissionAndNoDeveloperIdAndError2IsClosedWithARejectedResolution_ShouldBeOkAndReturnClusters(Boolean includeErrors) throws Exception {
    /**
     * 1,2 and 3 are clustered when using clusterSize = 2000. 4 is isolated.
     * 1, 3 and 4 are left in status SUBMITTED after creation.
     * 2 is updated to CLOSED with resolution REJECTED so will be filtered out of the results.
     */
    errorCreationRequest(TO_TEST_CLUSTERS_ERROR_1).andDo(print()).andExpect(status().isCreated());
    errorCreationRequest(TO_TEST_CLUSTERS_ERROR_3).andDo(print()).andExpect(status().isCreated());
    errorCreationRequest(TO_TEST_CLUSTERS_ERROR_4).andDo(print()).andExpect(status().isCreated());

    MvcResult mvcResult = errorCreationRequest(TO_TEST_CLUSTERS_ERROR_2).andDo(print()).andExpect(status().isCreated()).andReturn();
    Integer errorReference = JsonPath.read(mvcResult.getResponse().getContentAsString(), "$.errorReference");
    errorUpdateRequest(errorReference.toString(), UPDATE_ERROR_CLOSE_WITH_REJECTED_RESOLUTION).andExpect(status().isNoContent());

    // WHEN & THEN
    final String bbox = "1,1,541044,954890";
    final Integer clusterSize = 2000;

    this.mockMvc.perform(get(format(FIND_CLUSTERS_NO_DEV_ID_TEMPLATE, bbox, clusterSize, includeErrors)))
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.isolatedErrorOmissions").isArray())
            .andExpect(jsonPath("$.isolatedErrorOmissions", hasSize(3)))
            .andExpect(jsonPath("$.isolatedErrorOmissions[*].title", hasItems("cluster1", "cluster3", "cluster4")))
            .andExpect(jsonPath("$.clusters").isArray())
            .andExpect(jsonPath("$.clusters", hasSize(0)));
}

Where

private ResultActions errorCreationRequest(String sample) throws Exception {
    return this.mockMvc.perform(
            post("/errors")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(expectedJson(sample))
    );
}

And

private ResultActions errorUpdateRequest(String errorReference, String sample) throws Exception {
    return this.mockMvc.perform(put(format("/errors/%s/internalstatus", errorReference))
            .contentType(MediaType.APPLICATION_JSON)
            .content(expectedJson(sample)))
            .andDo(print());
}
