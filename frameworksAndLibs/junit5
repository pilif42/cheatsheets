- An example to test a service:

@ExtendWith(MockitoExtension.class)
public class BfinServiceImplTest {

    private static final String CASE_ID = "CS-123456-L1L2L3";
    private static final String POST_PATH = "/crm/cases";
    private static final String ERROR_MSG = "Something went wrong";

    @InjectMocks
    private BfinServiceImpl bfinService;

    @Mock
    private BfinConfiguration bfinConfiguration;

    @Mock
    private RestTemplate bfinRestTemplate;

    private RetryTemplate apiRetryTemplate;

    @BeforeEach
    public void setup() {
        when(bfinConfiguration.getPostPath()).thenReturn(POST_PATH);

        apiRetryTemplate = buildApiRetryTemplate();
        ReflectionTestUtils.setField(bfinService, "apiRetryTemplate", apiRetryTemplate);
    }

    @Test
    public void createInternalIssue_happyPath() throws InterruptedException, ExecutionException {
        // GIVEN
        final ErrorOmission errorOmission = buildErrorOmissionForBfin();
        final HttpEntity<ErrorSubmissionDto> request = buildRequest(errorOmission);

        final InternalCaseDto internalCaseDto = new InternalCaseDto();
        internalCaseDto.setCaseId(CASE_ID);
        when(bfinRestTemplate.postForObject(POST_PATH, request, InternalCaseDto.class)).thenReturn(internalCaseDto);

        // WHEN
        CompletableFuture<InternalCaseDto> internalCaseDtoFuture = bfinService.createInternalIssue(errorOmission);

        // THEN
        assertEquals(internalCaseDto, internalCaseDtoFuture.get());

        verify(bfinConfiguration, times(1)).getPostPath();
        verify(bfinRestTemplate, times(1)).postForObject(POST_PATH, request, InternalCaseDto.class);
    }


- How to unit test a System.exit:
Import:
<dependency>
   <groupId>com.ginsberg</groupId>
   <artifactId>junit5-system-exit</artifactId>
   <version>1.0.0</version>
   <scope>test</scope>
</dependency>

And

@Test
@ExpectSystemExitWithStatus(0)
public void run_happyPath() {
    // WHEN
    theApp.run();

    // THEN
    verify(masterService, times(1)).process();
}


- How to create a Parameterized test with 2 params:
@ParameterizedTest
@CsvSource({"null,null", "null,false", "null,true", "\"joeblog@gmail.com\",null", "\"joeblog@gmail.com\",false", "\"joeblog@gmail.com\",true"})
public void populate_emptyInputSet_expectEmptyResultSet(String developerId, Boolean includeErrors) {


- A good way to unit test a RetryConfig:
package com.sample.config;

import com.microsoft.azure.servicebus.primitives.ServiceBusException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.retry.support.RetryTemplate;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class RetryConfigTest {
    private RetryConfig retryConfig;

    @BeforeEach
    public void setup() {
        TopicConfiguration topicConfiguration = new TopicConfiguration();
        TopicConfiguration.RetryProperties retryProperties = new TopicConfiguration.RetryProperties();
        retryProperties.setInitialInterval(100);
        retryProperties.setMaxAttempts(3);
        retryProperties.setMultiplier(2.0);
        retryProperties.setMaxInterval(5000);
        topicConfiguration.setRetry(retryProperties);

        retryConfig = new RetryConfig(topicConfiguration);
    }

    @ParameterizedTest
    @MethodSource
    public void test_topicRetryTemplate_retriableExceptionsAreRetriedThreeTimes(Exception exception) {
        RetryTemplate topicRetryTemplate = retryConfig.topicRetryTemplate(retryConfig.exponentialBackOffPolicy());

        final AtomicInteger counter = new AtomicInteger(0);
        int count = -1;
        try {
            count = topicRetryTemplate.execute(context -> {
                counter.incrementAndGet();

                // Return exceptions every time we are called
                Exception outerException = new Exception("Test exception");
                outerException.initCause(exception);
                throw outerException;
            });
        } catch(Exception e) {
            assertEquals("Test exception", e.getMessage());
        }

        assertEquals(-1, count);
        assertEquals(3, counter.get());
    }

   private static Stream<Exception> test_topicRetryTemplate_retriableExceptionsAreRetriedThreeTimes() {
        return Stream.of(new InterruptedException(), new ServiceBusException(true));
    }

    @Test
    public void test_topicRetryTemplate_NoRetriesForOtherExceptions() {
        RetryTemplate topicRetryTemplate = retryConfig.topicRetryTemplate(retryConfig.exponentialBackOffPolicy());

        final AtomicInteger counter = new AtomicInteger(0);
        int count = -1;
        try {
            count = topicRetryTemplate.execute(context -> {
                counter.incrementAndGet();

                // Return exceptions every time we are called
                Exception outerException = new Exception("Test exception");
                throw outerException;
            });
        } catch(Exception e) {
            assertEquals("Test exception", e.getMessage());
        }

        assertEquals(-1, count);
        assertEquals(1, counter.get());
    }
}


- An option to test a service which makes http calls to an external API:
Dependencies required
<dependency>
   <groupId>org.mock-server</groupId>
   <artifactId>mockserver-netty</artifactId>
   <version>${mockServer.version}</version>
   <scope>test</scope>
</dependency>
<dependency>
   <groupId>org.mock-server</groupId>
   <artifactId>mockserver-client-java</artifactId>
   <version>${mockServer.version}</version>
   <scope>test</scope>
</dependency>

In your unit test which is annotated with @ExtendWith(MockitoExtension.class), define:
import static org.mockserver.integration.ClientAndServer.startClientAndServer;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

@BeforeAll
public static void startServer() {
    mockServer = startClientAndServer(PORT);
    restTemplate = new RestTemplateBuilder()
            .rootUri(MONETIZATION_API_ROOT_URI)
            .build();
}

@AfterAll
public static void stopServer() {
    mockServer.stop();
}

@BeforeEach
public void setup() {
mockServer.reset();
paymentService = new PaymentServiceImpl(restTemplate, telemetryEventLogger);
}

@Test
public void test_getPayments_expectOnePayment() throws Exception {
    // GIVEN
    File responseFile = ResourceUtils.getFile("classpath:apiResponses/getPayments.json");
    String data = FileUtils.readFileToString(responseFile, Charsets.UTF_8);
    mockServer.when(request().withMethod("GET").withPath("/payments/" + TEST_ORG_ID_1)
            .withQueryStringParameter("billingMonth", BILLING_MONTH.toString())
            .withQueryStringParameter("billingYear", BILLING_YEAR.toString())
            .withQueryStringParameter("size", String.valueOf(Integer.MAX_VALUE)))
            .respond(response()
                    .withStatusCode(200)
                    .withContentType(MediaType.APPLICATION_JSON)
                    .withBody(data));

    // WHEN
    List<PaymentResponse> res = paymentService.getPayments(TEST_ORG_ID_1, BILLING_MONTH, BILLING_YEAR);

    // THEN
    assertEquals(1, res.size());
    assertEquals("FAILED", res.get(0).getStatus());
}

And under /src/test/resources/apiResponses, getPayments.json which contains:
{
  "content": [
    {
      "transactionId": "9a24c1d4-9de0-ea11-a813-000d3a44a234-2020-10-000",
      "organisationId": "9a24c1d4-9de0-ea11-a813-000d3a44a234",
      ...
      "status": "FAILED"
    }
  ],
  "page": {
    "size": 10,
    "totalElements": 1,
    "totalPages": 1,
    "number": 0
  }
}
